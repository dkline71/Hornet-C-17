// AUTOGENERATED, DO NOT MODIFY

#ifndef __INSTR_ENCODING_HPP__
#define __INSTR_ENCODING_HPP__

#include "cstdint.hpp"
#include "error.hpp"
#include "bits.hpp"
#include "instr_format.hpp"

class instr_code_info {
public:
    const string name;
    instr_format format;
    const string desc;
};

extern const instr_code_info ic_infos[];

typedef enum {
    IC_ABS_D,
    IC_ABS_PS,
    IC_ABS_S,
    IC_ADD,
    IC_ADDI,
    IC_ADDIU,
    IC_ADDU,
    IC_ADD_D,
    IC_ADD_PS,
    IC_ADD_S,
    IC_ALNV_PS,
    IC_AND,
    IC_ANDI,
    IC_B,
    IC_BAL,
    IC_BC1F,
    IC_BC1FL,
    IC_BC1T,
    IC_BC1TL,
    IC_BC2F,
    IC_BC2FL,
    IC_BC2T,
    IC_BC2TL,
    IC_BEQ,
    IC_BEQL,
    IC_BGEZ,
    IC_BGEZAL,
    IC_BGEZALL,
    IC_BGEZL,
    IC_BGTZ,
    IC_BGTZL,
    IC_BLEZ,
    IC_BLEZL,
    IC_BLTZ,
    IC_BLTZAL,
    IC_BLTZALL,
    IC_BLTZL,
    IC_BNE,
    IC_BNEL,
    IC_BREAK,
    IC_CACHE,
    IC_CEIL_L_D,
    IC_CEIL_L_S,
    IC_CEIL_W_D,
    IC_CEIL_W_S,
    IC_CFC1,
    IC_CFC2,
    IC_CLO,
    IC_CLZ,
    IC_COP2,
    IC_CTC1,
    IC_CTC2,
    IC_CVT_D_L,
    IC_CVT_D_S,
    IC_CVT_D_W,
    IC_CVT_L_D,
    IC_CVT_L_S,
    IC_CVT_PS_S,
    IC_CVT_S_D,
    IC_CVT_S_L,
    IC_CVT_S_PL,
    IC_CVT_S_PU,
    IC_CVT_S_W,
    IC_CVT_W_D,
    IC_CVT_W_S,
    IC_C_EQ_D,
    IC_C_EQ_PS,
    IC_C_EQ_S,
    IC_C_F_D,
    IC_C_F_PS,
    IC_C_F_S,
    IC_C_LE_D,
    IC_C_LE_PS,
    IC_C_LE_S,
    IC_C_LT_D,
    IC_C_LT_PS,
    IC_C_LT_S,
    IC_C_NGE_D,
    IC_C_NGE_PS,
    IC_C_NGE_S,
    IC_C_NGLE_D,
    IC_C_NGLE_PS,
    IC_C_NGLE_S,
    IC_C_NGL_D,
    IC_C_NGL_PS,
    IC_C_NGL_S,
    IC_C_NGT_D,
    IC_C_NGT_PS,
    IC_C_NGT_S,
    IC_C_OLE_D,
    IC_C_OLE_PS,
    IC_C_OLE_S,
    IC_C_OLT_D,
    IC_C_OLT_PS,
    IC_C_OLT_S,
    IC_C_SEQ_D,
    IC_C_SEQ_PS,
    IC_C_SEQ_S,
    IC_C_SF_D,
    IC_C_SF_PS,
    IC_C_SF_S,
    IC_C_UEQ_D,
    IC_C_UEQ_PS,
    IC_C_UEQ_S,
    IC_C_ULE_D,
    IC_C_ULE_PS,
    IC_C_ULE_S,
    IC_C_ULT_D,
    IC_C_ULT_PS,
    IC_C_ULT_S,
    IC_C_UN_D,
    IC_C_UN_PS,
    IC_C_UN_S,
    IC_DERET,
    IC_DI,
    IC_DIV,
    IC_DIVU,
    IC_DIV_D,
    IC_DIV_S,
    IC_EHB,
    IC_EI,
    IC_ERET,
    IC_EXT,
    IC_FLOOR_L_D,
    IC_FLOOR_L_S,
    IC_FLOOR_W_D,
    IC_FLOOR_W_S,
    IC_INS,
    IC_J,
    IC_JAL,
    IC_JALR,
    IC_JALR_HB,
    IC_JR,
    IC_JR_HB,
    IC_LB,
    IC_LBU,
    IC_LDC1,
    IC_LDC2,
    IC_LDXC1,
    IC_LH,
    IC_LHU,
    IC_LL,
    IC_LUI,
    IC_LUXC1,
    IC_LW,
    IC_LWC1,
    IC_LWC2,
    IC_LWL,
    IC_LWR,
    IC_LWXC1,
    IC_MADD,
    IC_MADDU,
    IC_MADD_D,
    IC_MADD_PS,
    IC_MADD_S,
    IC_MFC0,
    IC_MFC1,
    IC_MFC2,
    IC_MFHC1,
    IC_MFHC2,
    IC_MFHI,
    IC_MFLO,
    IC_MOVE,
    IC_MOVF,
    IC_MOVF_D,
    IC_MOVF_PS,
    IC_MOVF_S,
    IC_MOVN,
    IC_MOVN_D,
    IC_MOVN_PS,
    IC_MOVN_S,
    IC_MOVT,
    IC_MOVT_D,
    IC_MOVT_PS,
    IC_MOVT_S,
    IC_MOVZ,
    IC_MOVZ_D,
    IC_MOVZ_PS,
    IC_MOVZ_S,
    IC_MOV_D,
    IC_MOV_PS,
    IC_MOV_S,
    IC_MSUB,
    IC_MSUBU,
    IC_MSUB_D,
    IC_MSUB_PS,
    IC_MSUB_S,
    IC_MTC0,
    IC_MTC1,
    IC_MTC2,
    IC_MTHC1,
    IC_MTHC2,
    IC_MTHI,
    IC_MTLO,
    IC_MUL,
    IC_MULT,
    IC_MULTU,
    IC_MUL_D,
    IC_MUL_PS,
    IC_MUL_S,
    IC_NEG_D,
    IC_NEG_PS,
    IC_NEG_S,
    IC_NMADD_D,
    IC_NMADD_PS,
    IC_NMADD_S,
    IC_NMSUB_D,
    IC_NMSUB_PS,
    IC_NMSUB_S,
    IC_NOP,
    IC_NOR,
    IC_OR,
    IC_ORI,
    IC_PAUSE,
    IC_PLL_PS,
    IC_PLU_PS,
    IC_PREF,
    IC_PREFX,
    IC_PUL_PS,
    IC_PUU_PS,
    IC_RDHWR,
    IC_RDPGPR,
    IC_RECIP_D,
    IC_RECIP_S,
    IC_ROTR,
    IC_ROTRV,
    IC_ROUND_L_D,
    IC_ROUND_L_S,
    IC_ROUND_W_D,
    IC_ROUND_W_S,
    IC_RSQRT_D,
    IC_RSQRT_S,
    IC_SB,
    IC_SC,
    IC_SDBBP,
    IC_SDC1,
    IC_SDC2,
    IC_SDXC1,
    IC_SEB,
    IC_SEH,
    IC_SH,
    IC_SLL,
    IC_SLLV,
    IC_SLT,
    IC_SLTI,
    IC_SLTIU,
    IC_SLTU,
    IC_SQRT_D,
    IC_SQRT_S,
    IC_SRA,
    IC_SRAV,
    IC_SRL,
    IC_SRLV,
    IC_SSNOP,
    IC_SUB,
    IC_SUBU,
    IC_SUB_D,
    IC_SUB_PS,
    IC_SUB_S,
    IC_SUXC1,
    IC_SW,
    IC_SWC1,
    IC_SWC2,
    IC_SWL,
    IC_SWR,
    IC_SWXC1,
    IC_SYNC,
    IC_SYNCI,
    IC_SYSCALL,
    IC_TEQ,
    IC_TEQI,
    IC_TGE,
    IC_TGEI,
    IC_TGEIU,
    IC_TGEU,
    IC_TLBP,
    IC_TLBR,
    IC_TLBWI,
    IC_TLBWR,
    IC_TLT,
    IC_TLTI,
    IC_TLTIU,
    IC_TLTU,
    IC_TNE,
    IC_TNEI,
    IC_TRUNC_L_D,
    IC_TRUNC_L_S,
    IC_TRUNC_W_D,
    IC_TRUNC_W_S,
    IC_WAIT,
    IC_WRPGPR,
    IC_WSBH,
    IC_XOR,
    IC_XORI,
    NUM_INSTR_CODES
} instr_code;

inline instr_code decode(uint32_t encoding) {
    instr_code ic = NUM_INSTR_CODES;
    switch (bits(encoding, 31, 26)) {
    case 0x00:
        switch (bits(encoding, 5, 0)) {
        case 0x00:
            ic = IC_SLL;
            switch (bits(encoding, 20, 16)) {
            case 0x00:
                switch (bits(encoding, 15, 11)) {
                case 0x00:
                    switch (bits(encoding, 10, 6)) {
                    case 0x00:
                        ic = IC_NOP;
                        break;
                    case 0x01:
                        ic = IC_SSNOP;
                        break;
                    case 0x03:
                        ic = IC_EHB;
                        break;
                    case 0x05:
                        ic = IC_PAUSE;
                        break;
                    }
                    break;
                }
                break;
            }
            break;
        case 0x01:
            switch (bits(encoding, 16, 16)) {
            case 0x00:
                ic = IC_MOVF;
                break;
            case 0x01:
                ic = IC_MOVT;
                break;
            }
            break;
        case 0x02:
            switch (bits(encoding, 21, 21)) {
            case 0x00:
                ic = IC_SRL;
                break;
            case 0x01:
                ic = IC_ROTR;
                break;
            }
            break;
        case 0x03:
            ic = IC_SRA;
            break;
        case 0x04:
            ic = IC_SLLV;
            break;
        case 0x06:
            switch (bits(encoding, 6, 6)) {
            case 0x00:
                ic = IC_SRLV;
                break;
            case 0x01:
                ic = IC_ROTRV;
                break;
            }
            break;
        case 0x07:
            ic = IC_SRAV;
            break;
        case 0x08:
            ic = IC_JR;
            switch (bits(encoding, 10, 10)) {
            case 0x01:
                ic = IC_JR_HB;
                break;
            }
            break;
        case 0x09:
            ic = IC_JALR;
            switch (bits(encoding, 10, 10)) {
            case 0x01:
                ic = IC_JALR_HB;
                break;
            }
            break;
        case 0x0a:
            ic = IC_MOVZ;
            break;
        case 0x0b:
            ic = IC_MOVN;
            break;
        case 0x0c:
            ic = IC_SYSCALL;
            break;
        case 0x0d:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_BREAK;
                break;
            }
            break;
        case 0x0f:
            ic = IC_SYNC;
            break;
        case 0x10:
            ic = IC_MFHI;
            break;
        case 0x11:
            ic = IC_MTHI;
            break;
        case 0x12:
            ic = IC_MFLO;
            break;
        case 0x13:
            ic = IC_MTLO;
            break;
        case 0x18:
            ic = IC_MULT;
            break;
        case 0x19:
            ic = IC_MULTU;
            break;
        case 0x1a:
            ic = IC_DIV;
            break;
        case 0x1b:
            ic = IC_DIVU;
            break;
        case 0x20:
            ic = IC_ADD;
            break;
        case 0x21:
            ic = IC_ADDU;
            switch (bits(encoding, 20, 16)) {
            case 0x00:
                ic = IC_MOVE;
                break;
            }
            break;
        case 0x22:
            ic = IC_SUB;
            break;
        case 0x23:
            ic = IC_SUBU;
            break;
        case 0x24:
            ic = IC_AND;
            break;
        case 0x25:
            ic = IC_OR;
            break;
        case 0x26:
            ic = IC_XOR;
            break;
        case 0x27:
            ic = IC_NOR;
            break;
        case 0x2a:
            ic = IC_SLT;
            break;
        case 0x2b:
            ic = IC_SLTU;
            break;
        case 0x30:
            ic = IC_TGE;
            break;
        case 0x31:
            ic = IC_TGEU;
            break;
        case 0x32:
            ic = IC_TLT;
            break;
        case 0x33:
            ic = IC_TLTU;
            break;
        case 0x34:
            ic = IC_TEQ;
            break;
        case 0x36:
            ic = IC_TNE;
            break;
        }
        break;
    case 0x01:
        switch (bits(encoding, 20, 16)) {
        case 0x00:
            ic = IC_BLTZ;
            break;
        case 0x01:
            ic = IC_BGEZ;
            break;
        case 0x02:
            ic = IC_BLTZL;
            break;
        case 0x03:
            ic = IC_BGEZL;
            break;
        case 0x08:
            ic = IC_TGEI;
            break;
        case 0x09:
            ic = IC_TGEIU;
            break;
        case 0x0a:
            ic = IC_TLTI;
            break;
        case 0x0b:
            ic = IC_TLTIU;
            break;
        case 0x0c:
            ic = IC_TEQI;
            break;
        case 0x0e:
            ic = IC_TNEI;
            break;
        case 0x10:
            ic = IC_BLTZAL;
            break;
        case 0x11:
            switch (bits(encoding, 25, 21)) {
            case 0x00:
                ic = IC_BAL;
                break;
            }
            ic = IC_BGEZAL;
            break;
        case 0x12:
            ic = IC_BLTZALL;
            break;
        case 0x13:
            ic = IC_BGEZALL;
            break;
        case 0x1f:
            ic = IC_SYNCI;
            break;
        }
        break;
    case 0x02:
        ic = IC_J;
        break;
    case 0x03:
        ic = IC_JAL;
        break;
    case 0x04:
        ic = IC_BEQ;
        switch (bits(encoding, 20, 16)) {
        case 0x00:
            switch (bits(encoding, 25, 21)) {
            case 0x00:
                ic = IC_B;
                break;
            }
            break;
        }
        break;
    case 0x05:
        ic = IC_BNE;
        break;
    case 0x06:
        ic = IC_BLEZ;
        break;
    case 0x07:
        ic = IC_BGTZ;
        break;
    case 0x08:
        ic = IC_ADDI;
        break;
    case 0x09:
        ic = IC_ADDIU;
        break;
    case 0x0a:
        ic = IC_SLTI;
        break;
    case 0x0b:
        ic = IC_SLTIU;
        break;
    case 0x0c:
        ic = IC_ANDI;
        break;
    case 0x0d:
        ic = IC_ORI;
        break;
    case 0x0e:
        ic = IC_XORI;
        break;
    case 0x0f:
        ic = IC_LUI;
        break;
    case 0x10:
        switch (bits(encoding, 25, 21)) {
        case 0x00:
            ic = IC_MFC0;
            break;
        case 0x0a:
            ic = IC_RDPGPR;
            break;
        case 0x0b:
            switch (bits(encoding, 5, 5)) {
            case 0x00:
                ic = IC_DI;
                break;
            case 0x01:
                ic = IC_EI;
                break;
            }
            break;
        case 0x04:
            ic = IC_MTC0;
            break;
        case 0x0e:
            ic = IC_WRPGPR;
            break;
        }
        switch (bits(encoding, 25, 25)) {
        case 0x01:
            switch (bits(encoding, 5, 0)) {
            case 0x20:
                ic = IC_WAIT;
                break;
            case 0x01:
                ic = IC_TLBR;
                break;
            case 0x02:
                ic = IC_TLBWI;
                break;
            case 0x06:
                ic = IC_TLBWR;
                break;
            case 0x08:
                ic = IC_TLBP;
                break;
            case 0x18:
                ic = IC_ERET;
                break;
            case 0x1f:
                ic = IC_DERET;
                break;
            }
            break;
        }
        break;
    case 0x11:
        switch (bits(encoding, 25, 21)) {
        case 0x00:
            ic = IC_MFC1;
            break;
        case 0x02:
            ic = IC_CFC1;
            break;
        case 0x03:
            ic = IC_MFHC1;
            break;
        case 0x04:
            ic = IC_MTC1;
            break;
        case 0x06:
            ic = IC_CTC1;
            break;
        case 0x07:
            ic = IC_MTHC1;
            break;
        case 0x08:
            switch (bits(encoding, 17, 16)) {
            case 0x00:
                ic = IC_BC1F;
                break;
            case 0x01:
                ic = IC_BC1T;
                break;
            case 0x02:
                ic = IC_BC1FL;
                break;
            case 0x03:
                ic = IC_BC1TL;
                break;
            }
            break;
        }
        switch (bits(encoding, 5, 0)) {
        case 0x00:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_ADD_S;
                break;
            case 0x11:
                ic = IC_ADD_D;
                break;
            case 0x16:
                ic = IC_ADD_PS;
                break;
            }
            break;
        case 0x01:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_SUB_S;
                break;
            case 0x11:
                ic = IC_SUB_D;
                break;
            case 0x16:
                ic = IC_SUB_PS;
                break;
            }
            break;
        case 0x02:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_MUL_S;
                break;
            case 0x11:
                ic = IC_MUL_D;
                break;
            case 0x16:
                ic = IC_MUL_PS;
                break;
            }
            break;
        case 0x03:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_DIV_S;
                break;
            case 0x11:
                ic = IC_DIV_D;
                break;
            }
            break;
        case 0x04:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_SQRT_S;
                break;
            case 0x11:
                ic = IC_SQRT_D;
                break;
            }
            break;
        case 0x05:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_ABS_S;
                break;
            case 0x11:
                ic = IC_ABS_D;
                break;
            case 0x16:
                ic = IC_ABS_PS;
                break;
            }
            break;
        case 0x06:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_MOV_S;
                break;
            case 0x11:
                ic = IC_MOV_D;
                break;
            case 0x16:
                ic = IC_MOV_PS;
                break;
            }
            break;
        case 0x07:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_NEG_S;
                break;
            case 0x11:
                ic = IC_NEG_D;
                break;
            case 0x16:
                ic = IC_NEG_PS;
                break;
            }
            break;
        case 0x08:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_ROUND_L_S;
                break;
            case 0x11:
                ic = IC_ROUND_L_D;
                break;
            }
            break;
        case 0x09:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_TRUNC_L_S;
                break;
            case 0x11:
                ic = IC_TRUNC_L_D;
                break;
            }
            break;
        case 0x0a:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_CEIL_L_S;
                break;
            case 0x11:
                ic = IC_CEIL_L_D;
                break;
            }
            break;
        case 0x0b:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_FLOOR_L_S;
                break;
            case 0x11:
                ic = IC_FLOOR_L_D;
                break;
            }
            break;
        case 0x0c:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_ROUND_W_S;
                break;
            case 0x11:
                ic = IC_ROUND_W_D;
                break;
            }
            break;
        case 0x0d:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_TRUNC_W_S;
                break;
            case 0x11:
                ic = IC_TRUNC_W_D;
                break;
            }
            break;
        case 0x0e:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_CEIL_W_S;
                break;
            case 0x11:
                ic = IC_CEIL_W_D;
                break;
            }
            break;
        case 0x0f:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_FLOOR_W_S;
                break;
            case 0x11:
                ic = IC_FLOOR_W_D;
                break;
            }
            break;
        case 0x11:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                switch (bits(encoding, 16, 16)) {
                case 0x00:
                    ic = IC_MOVF_S;
                    break;
                case 0x01:
                    ic = IC_MOVT_S;
                    break;
                }
                break;
            case 0x11:
                switch (bits(encoding, 16, 16)) {
                case 0x00:
                    ic = IC_MOVF_D;
                    break;
                case 0x01:
                    ic = IC_MOVT_D;
                    break;
                }
                break;
            case 0x16:
                switch (bits(encoding, 16, 16)) {
                case 0x00:
                    ic = IC_MOVF_PS;
                    break;
                case 0x01:
                    ic = IC_MOVT_PS;
                    break;
                }
                break;
            }
            break;
        case 0x12:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_MOVZ_S;
                break;
            case 0x11:
                ic = IC_MOVZ_D;
                break;
            case 0x16:
                ic = IC_MOVZ_PS;
                break;
            }
            break;
        case 0x13:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_MOVN_S;
                break;
            case 0x11:
                ic = IC_MOVN_D;
                break;
            case 0x16:
                ic = IC_MOVN_PS;
                break;
            }
            break;
        case 0x15:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_RECIP_S;
                break;
            case 0x11:
                ic = IC_RECIP_D;
                break;
            }
            break;
        case 0x16:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_RSQRT_S;
                break;
            case 0x11:
                ic = IC_RSQRT_D;
                break;
            }
            break;
        case 0x20:
            switch (bits(encoding, 25, 21)) {
            case 0x11:
                ic = IC_CVT_S_D;
                break;
            case 0x14:
                ic = IC_CVT_S_W;
                break;
            case 0x15:
                ic = IC_CVT_S_L;
                break;
            case 0x16:
                ic = IC_CVT_S_PU;
                break;
            }
            break;
        case 0x21:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_CVT_D_S;
                break;
            case 0x14:
                ic = IC_CVT_D_W;
                break;
            case 0x15:
                ic = IC_CVT_D_L;
                break;
            }
            break;
        case 0x24:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_CVT_W_S;
                break;
            case 0x11:
                ic = IC_CVT_W_D;
                break;
            }
            break;
        case 0x25:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_CVT_L_S;
                break;
            case 0x11:
                ic = IC_CVT_L_D;
                break;
            }
            break;
        case 0x26:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_CVT_PS_S;
                break;
            }
            break;
        case 0x28:
            switch (bits(encoding, 25, 21)) {
            case 0x16:
                ic = IC_CVT_S_PL;
                break;
            }
            break;
        case 0x2c:
            switch (bits(encoding, 25, 21)) {
            case 0x16:
                ic = IC_PLL_PS;
                break;
            }
            break;
        case 0x2d:
            switch (bits(encoding, 25, 21)) {
            case 0x16:
                ic = IC_PLU_PS;
                break;
            }
            break;
        case 0x2e:
            switch (bits(encoding, 25, 21)) {
            case 0x16:
                ic = IC_PUL_PS;
                break;
            }
            break;
        case 0x2f:
            switch (bits(encoding, 25, 21)) {
            case 0x16:
                ic = IC_PUU_PS;
                break;
            }
            break;
        case 0x30:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_F_S;
                break;
            case 0x11:
                ic = IC_C_F_D;
                break;
            case 0x16:
                ic = IC_C_F_PS;
                break;
            }
            break;
        case 0x31:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_UN_S;
                break;
            case 0x11:
                ic = IC_C_UN_D;
                break;
            case 0x16:
                ic = IC_C_UN_PS;
                break;
            }
            break;
        case 0x32:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_EQ_S;
                break;
            case 0x11:
                ic = IC_C_EQ_D;
                break;
            case 0x16:
                ic = IC_C_EQ_PS;
                break;
            }
            break;
        case 0x33:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_UEQ_S;
                break;
            case 0x11:
                ic = IC_C_UEQ_D;
                break;
            case 0x16:
                ic = IC_C_UEQ_PS;
                break;
            }
            break;
        case 0x34:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_OLT_S;
                break;
            case 0x11:
                ic = IC_C_OLT_D;
                break;
            case 0x16:
                ic = IC_C_OLT_PS;
                break;
            }
            break;
        case 0x35:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_ULT_S;
                break;
            case 0x11:
                ic = IC_C_ULT_D;
                break;
            case 0x16:
                ic = IC_C_ULT_PS;
                break;
            }
            break;
        case 0x36:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_OLE_S;
                break;
            case 0x11:
                ic = IC_C_OLE_D;
                break;
            case 0x16:
                ic = IC_C_OLE_PS;
                break;
            }
            break;
        case 0x37:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_ULE_S;
                break;
            case 0x11:
                ic = IC_C_ULE_D;
                break;
            case 0x16:
                ic = IC_C_ULE_PS;
                break;
            }
            break;
        case 0x38:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_SF_S;
                break;
            case 0x11:
                ic = IC_C_SF_D;
                break;
            case 0x16:
                ic = IC_C_SF_PS;
                break;
            }
            break;
        case 0x39:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_NGLE_S;
                break;
            case 0x11:
                ic = IC_C_NGLE_D;
                break;
            case 0x16:
                ic = IC_C_NGLE_PS;
                break;
            }
            break;
        case 0x3a:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_SEQ_S;
                break;
            case 0x11:
                ic = IC_C_SEQ_D;
                break;
            case 0x16:
                ic = IC_C_SEQ_PS;
                break;
            }
            break;
        case 0x3b:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_NGL_S;
                break;
            case 0x11:
                ic = IC_C_NGL_D;
                break;
            case 0x16:
                ic = IC_C_NGL_PS;
                break;
            }
            break;
        case 0x3c:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_LT_S;
                break;
            case 0x11:
                ic = IC_C_LT_D;
                break;
            case 0x16:
                ic = IC_C_LT_PS;
                break;
            }
            break;
        case 0x3d:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_NGE_S;
                break;
            case 0x11:
                ic = IC_C_NGE_D;
                break;
            case 0x16:
                ic = IC_C_NGE_PS;
                break;
            }
            break;
        case 0x3e:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_LE_S;
                break;
            case 0x11:
                ic = IC_C_LE_D;
                break;
            case 0x16:
                ic = IC_C_LE_PS;
                break;
            }
            break;
        case 0x3f:
            switch (bits(encoding, 25, 21)) {
            case 0x10:
                ic = IC_C_NGT_S;
                break;
            case 0x11:
                ic = IC_C_NGT_D;
                break;
            case 0x16:
                ic = IC_C_NGT_PS;
                break;
            }
            break;
        }
        break;
    case 0x12:
        switch (bits(encoding, 25, 21)) {
        case 0x00:
            ic = IC_MFC2;
            break;
        case 0x02:
            ic = IC_CFC2;
            break;
        case 0x04:
            ic = IC_MTC2;
            break;
        case 0x05:
            ic = IC_MFHC2;
            break;
        case 0x06:
            ic = IC_CTC2;
            break;
        case 0x07:
            ic = IC_MTHC2;
            break;
        case 0x08:
            switch (bits(encoding, 17, 16)) {
            case 0x00:
                ic = IC_BC2F;
                break;
            case 0x01:
                ic = IC_BC2T;
                break;
            case 0x02:
                ic = IC_BC2FL;
                break;
            case 0x03:
                ic = IC_BC2TL;
                break;
            }
            break;
        }
        switch (bits(encoding, 25, 25)) {
        case 0x01:
            ic = IC_COP2;
            break;
        }
        break;
    case 0x13:
        switch (bits(encoding, 5, 0)) {
        case 0x00:
            ic = IC_LWXC1;
            break;
        case 0x01:
            ic = IC_LDXC1;
            break;
        case 0x20:
            ic = IC_MADD_S;
            break;
        case 0x05:
            ic = IC_LUXC1;
            break;
        case 0x26:
            ic = IC_MADD_PS;
            break;
        case 0x21:
            ic = IC_MADD_D;
            break;
        case 0x28:
            ic = IC_MSUB_S;
            break;
        case 0x29:
            ic = IC_MSUB_D;
            break;
        case 0x08:
            ic = IC_SWXC1;
            break;
        case 0x0d:
            ic = IC_SUXC1;
            break;
        case 0x2e:
            ic = IC_MSUB_PS;
            break;
        case 0x0f:
            ic = IC_PREFX;
            break;
        case 0x30:
            ic = IC_NMADD_S;
            break;
        case 0x31:
            ic = IC_NMADD_D;
            break;
        case 0x3e:
            ic = IC_NMSUB_PS;
            break;
        case 0x36:
            ic = IC_NMADD_PS;
            break;
        case 0x09:
            ic = IC_SDXC1;
            break;
        case 0x38:
            ic = IC_NMSUB_S;
            break;
        case 0x39:
            ic = IC_NMSUB_D;
            break;
        case 0x1e:
            ic = IC_ALNV_PS;
            break;
        }
        break;
    case 0x14:
        ic = IC_BEQL;
        break;
    case 0x15:
        ic = IC_BNEL;
        break;
    case 0x16:
        ic = IC_BLEZL;
        break;
    case 0x17:
        ic = IC_BGTZL;
        break;
    case 0x1c:
        switch (bits(encoding, 5, 0)) {
        case 0x20:
            ic = IC_CLZ;
            break;
        case 0x21:
            ic = IC_CLO;
            break;
        case 0x02:
            ic = IC_MUL;
            break;
        case 0x04:
            ic = IC_MSUB;
            break;
        case 0x05:
            ic = IC_MSUBU;
            break;
        case 0x00:
            ic = IC_MADD;
            break;
        case 0x01:
            ic = IC_MADDU;
            break;
        case 0x3f:
            ic = IC_SDBBP;
            break;
        }
        break;
    case 0x1f:
        switch (bits(encoding, 5, 0)) {
        case 0x00:
            ic = IC_EXT;
            break;
        case 0x20:
            switch (bits(encoding, 10, 6)) {
            case 0x10:
                ic = IC_SEB;
                break;
            case 0x18:
                ic = IC_SEH;
                break;
            case 0x02:
                ic = IC_WSBH;
                break;
            }
            break;
        case 0x3b:
            ic = IC_RDHWR;
            break;
        case 0x04:
            ic = IC_INS;
            break;
        }
        break;
    case 0x20:
        ic = IC_LB;
        break;
    case 0x21:
        ic = IC_LH;
        break;
    case 0x22:
        ic = IC_LWL;
        break;
    case 0x23:
        ic = IC_LW;
        break;
    case 0x24:
        ic = IC_LBU;
        break;
    case 0x25:
        ic = IC_LHU;
        break;
    case 0x26:
        ic = IC_LWR;
        break;
    case 0x28:
        ic = IC_SB;
        break;
    case 0x29:
        ic = IC_SH;
        break;
    case 0x2a:
        ic = IC_SWL;
        break;
    case 0x2b:
        ic = IC_SW;
        break;
    case 0x2e:
        ic = IC_SWR;
        break;
    case 0x2f:
        ic = IC_CACHE;
        break;
    case 0x30:
        ic = IC_LL;
        break;
    case 0x31:
        ic = IC_LWC1;
        break;
    case 0x32:
        ic = IC_LWC2;
        break;
    case 0x33:
        ic = IC_PREF;
        break;
    case 0x35:
        ic = IC_LDC1;
        break;
    case 0x36:
        ic = IC_LDC2;
        break;
    case 0x38:
        ic = IC_SC;
        break;
    case 0x39:
        ic = IC_SWC1;
        break;
    case 0x3a:
        ic = IC_SWC2;
        break;
    case 0x3d:
        ic = IC_SDC1;
        break;
    case 0x3e:
        ic = IC_SDC2;
        break;
    }
    return ic;
}
#endif // __INSTR_ENCODING_HPP__
